<?php

// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\models\Account;
use common\models\Category;
use common\models\Currency;
use common\models\TransactionQuery;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\Expression;

/**
 * This is the base-model class for table "transaction".
 *
 * @property integer $id
 * @property integer $account_id
 * @property integer $category_id
 * @property integer $target_id
 * @property string $value
 * @property integer $currency_id
 * @property string $created_at
 * @property string $updated_at
 *
 * @property Account $account
 * @property Category $category
 * @property Currency $currency
 * @property Account $target
 * @property string $aliasModel
 */
abstract class Transaction extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'transaction';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['account_id', 'category_id', 'target_id', 'value', 'created_at'], 'required'],
            [['account_id', 'category_id', 'target_id', 'currency_id'], 'integer'],
            [['value'], 'number', 'min' => 0],
            [['value'], 'double'],
            [['created_at'], 'date'],
            [['target_id'], 'compare',
                'compareAttribute' => 'account_id',
                'operator' => '!=', 'type' => 'number'],
            [['account_id'], 'compare',
                'compareAttribute' => 'target_id',
                'operator' => '!=', 'type' => 'number'],
            [['account_id'], 'exist', 'skipOnError' => true,
                'targetClass' => Account::class,
                'targetAttribute' => ['account_id' => 'id']],
            [['category_id'], 'exist', 'skipOnError' => true,
                'targetClass' => Category::class,
                'targetAttribute' => ['category_id' => 'id']],
            [['currency_id'], 'exist', 'skipOnError' => true,
                'targetClass' => Currency::class,
                'targetAttribute' => ['currency_id' => 'id']],
            [['target_id'], 'exist', 'skipOnError' => true,
                'targetClass' => Account::class,
                'targetAttribute' => ['target_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'account_id' => 'Source',
            'category_id' => 'Category ID',
            'target_id' => 'Target',
            'created_at' => 'Created',
            'updated_at' => 'Updated',
            'value' => 'Value',
            'currency_id' => 'Currency',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'account_id' => 'Source Account',
            'target_id' => 'Target Account',
            'currency_id' => 'Target transaction Currency',
            'value' => 'Value of the transaction in the source account currency',
            'category_id' => 'Transaction category',
            'created_at' => 'Execution date',
        ]);
    }

    /**
     * @return ActiveQuery
     */
    public function getAccount()
    {
        return $this->hasOne(Account::class, ['id' => 'account_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getCurrency()
    {
        return $this->hasOne(Currency::class, ['id' => 'currency_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getTarget()
    {
        return $this->hasOne(Account::class, ['id' => 'target_id']);
    }

    /**
     * @inheritdoc
     * @return TransactionQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new TransactionQuery(get_called_class());
    }
}
