<?php

// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\models\AccountQuery;
use common\models\AccountType;
use common\models\Color;
use common\models\Currency;
use common\models\Icon;
use common\models\Transaction;
use common\models\User;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "account".
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $name
 * @property integer $account_type_id
 * @property integer $icon_id
 * @property integer $color_id
 * @property string $balance
 * @property integer $default_currency
 *
 * @property AccountType $accountType
 * @property Color $color
 * @property Currency $defaultCurrency
 * @property Icon $icon
 * @property User $user
 * @property Transaction[] $transactions
 * @property Transaction[] $transactions0
 * @property string $aliasModel
 */
abstract class Account extends ActiveRecord
{
    public $provider;

    /**
     * Returns the table name
     *
     * @return string The table name in the database
     *
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'account';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'account_type_id', 'icon_id', 'color_id', 'default_currency'], 'integer'],
            [['account_type_id', 'icon_id', 'color_id', 'balance', 'default_currency', 'user_id', 'name'], 'required'],
            [['balance'], 'number'],
            [['account_type_id'], 'exist', 'skipOnError' => true,
                'targetClass' => AccountType::class,
                'targetAttribute' => ['account_type_id' => 'id']],
            [['color_id'], 'exist', 'skipOnError' => true,
                'targetClass' => Color::class,
                'targetAttribute' => ['color_id' => 'id']],
            [['default_currency'], 'exist', 'skipOnError' => true,
                'targetClass' => Currency::class,
                'targetAttribute' => ['default_currency' => 'id']],
            [['icon_id'], 'exist', 'skipOnError' => true,
                'targetClass' => Icon::class,
                'targetAttribute' => ['icon_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true,
                'targetClass' => User::class,
                'targetAttribute' => ['user_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'Owner',
            'name' => 'Account Name',
            'account_type_id' => 'Account Type ID',
            'icon_id' => 'Icon',
            'color_id' => 'Color',
            'balance' => 'Current Balance',
            'default_currency' => 'Currency',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'user_id' => 'Owner',
            'name' => "Account's friendly name",
            'icon_id' => 'Icon',
            'color_id' => 'Color',
            'balance' => 'Current Balance',
            'default_currency' => 'Currency',
        ]);
    }

    /**
     * @return ActiveQuery
     */
    public function getAccountType()
    {
        return $this->hasOne(AccountType::class, ['id' => 'account_type_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getColor()
    {
        return $this->hasOne(Color::class, ['id' => 'color_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getDefaultCurrency()
    {
        return $this->hasOne(Currency::class, ['id' => 'default_currency']);
    }

    /**
     * @return ActiveQuery
     */
    public function getIcon()
    {
        return $this->hasOne(Icon::class, ['id' => 'icon_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getTransactions()
    {
        return $this->hasMany(Transaction::class, ['account_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getTransactions0()
    {
        return $this->hasMany(Transaction::class, ['target_id' => 'id']);
    }

    /**
     * @inheritdoc
     * @return AccountQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new AccountQuery(get_called_class());
    }
}
